{"name": "test_can_user_make_purchase", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <Page.CheckoutPage.CheckoutPage object at 0x000001A33F25E128>\naddress = 'Av. Buenos Aires #809', optional_address = 'Res. Las Palmas'\ncity = 'Santo Domingo', state = 'Distrito Nacional', zip = '10011'\nphone = '8095942092'\n\n    def insert_address_information(self, address, optional_address, city, state, zip, phone):\n        try:\n            self.wait.until(\n>               EC.presence_of_element_located((By.XPATH, \"//h2[contains(text(),'¿Adónde entregamos tu pedido?')]\")))\n\n..\\Page\\CheckoutPage.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"234473962938ee6fcff9ea7549844366\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x000001A33F25EB38>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_steps.Test testMethod=test_can_user_make_purchase>\n\n    @allure.step(\"Test: Can user make a purchase\")\n    def test_can_user_make_purchase(self):\n        home_page = HomePage(self.driver)\n        home_page.visit_login_page()\n        login_page = LoginPage(self.driver)\n        login_page.login('alexislopezg07@gmail.com', 'Yamero!')\n        home_page = HomePage(self.driver)\n        home_page.search_item('2017 Rollerblade Hombre')\n        search_page = SearchPage(self.driver)\n        search_page.select_rollerblade()\n        item_page = ItemPage(self.driver)\n        item_page.add_item_to_cart()\n        checkout_page = CheckoutPage(self.driver)\n        checkout_page.insert_address_information(\"Av. Buenos Aires #809\",\n                                                 \"Res. Las Palmas\",\n                                                 \"Santo Domingo\",\n                                                 \"Distrito Nacional\",\n                                                 \"10011\",\n>                                                \"8095942092\")\n\ntest_steps.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\Page\\CheckoutPage.py:33: in insert_address_information\n    self.wait.until(EC.presence_of_element_located((By.NAME, \"reviewbin\")))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"234473962938ee6fcff9ea7549844366\")>\nmethod = <selenium.webdriver.support.expected_conditions.presence_of_element_located object at 0x000001A33F25E7B8>\nmessage = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value is not False.\"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.time() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.time() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:80: TimeoutException"}, "steps": [{"name": "Test: Can user make a purchase", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Python\\lib\\site-packages\\allure_commons\\_allure.py\", line 141, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\alexi\\PycharmProjects\\eBay_Purchase_Test\\testcases\\test_steps.py\", line 49, in test_can_user_make_purchase\n    \"8095942092\")\n  File \"C:\\Users\\alexi\\PycharmProjects\\eBay_Purchase_Test\\Page\\CheckoutPage.py\", line 33, in insert_address_information\n    self.wait.until(EC.presence_of_element_located((By.NAME, \"reviewbin\")))\n  File \"C:\\Python\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 80, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "start": 1543479612500, "stop": 1543479652786}], "attachments": [{"name": "log", "source": "2bb8eb6c-0667-4e61-ab74-715e3b1533d0-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "78270c12-550b-43e3-99ba-e31627eb0565-attachment.txt", "type": "text/plain"}, {"name": "stderr", "source": "be34632a-ca89-40f7-982a-a85b906de2c1-attachment.txt", "type": "text/plain"}], "start": 1543479606798, "stop": 1543479653106, "uuid": "b32fe5b7-46df-4025-bb00-fa4413950442", "historyId": "034045bb817a609125d8a3b7ae393924", "fullName": "test_steps.Test#test_can_user_make_purchase", "labels": [{"name": "suite", "value": "test_steps"}, {"name": "subSuite", "value": "Test"}, {"name": "host", "value": "DESKTOP-UB5E2R0"}, {"name": "thread", "value": "8000-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_steps"}]}